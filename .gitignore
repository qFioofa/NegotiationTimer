# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release
build

# Dependency directories
node_modules/
jspm_packages/
# Этап сборки (Builder Stage)
FROM node:20 AS builder

WORKDIR /app

# Копируем файлы конфигурации и зависимости для эффективного кэширования слоев
COPY package*.json ./
COPY svelte.config.js ./
COPY vite.config.js ./

# Устанавливаем все зависимости, включая devDependencies, необходимые для сборки
RUN npm ci

# Копируем весь исходный код приложения
COPY . .

# Запускаем сборку проекта
# Эта команда использует адаптер (@sveltejs/adapter-node) для генерации production-билда
RUN npm run build


# Финальный этап (Production Stage)
FROM node:20-alpine

LABEL maintainer="qFioofa"
LABEL description="Negotiation Timers App"

WORKDIR /app

# Копируем package файлы для установки runtime зависимостей
# Копируем только package-lock.json и package.json для установки зависимостей
COPY package*.json ./

# Копируем svelte.config.js, если он нужен для запуска (например, для чтения опций адаптера)
COPY svelte.config.js ./

# Копируем результат сборки (.svelte-kit/output) из этапа builder
# Адаптер adapter-node помещает результат в .svelte-kit/output
COPY --from=builder /app/.svelte-kit ./.svelte-kit

# Устанавливаем только production зависимости в финальном образе
# Это уменьшает размер образа и исключает devDependencies
# Используем --omit=dev и --ignore-scripts, чтобы избежать запуска prepare-скриптов,
# которые могут требовать devDependencies (например, svelte-kit)
RUN npm ci --omit=dev --ignore-scripts

# Открываем порт, который использует приложение.
# adapter-node по умолчанию использует порт 3000.
# Убедимся, что мы используем этот порт.
EXPOSE 3000

# Определяем переменные окружения по умолчанию
# NODE_ENV=production обычно устанавливается автоматически через npm ci --omit=dev,
# но явное указание не повредит.
# Устанавливаем порт по умолчанию. Он может быть переопределен через docker-compose.yml или docker run -e.
ENV NODE_ENV=production
ENV PORT=3000

# Команда запуска приложения
# adapter-node генерирует сервер в .svelte-kit/output/server/index.js
# Этот сервер учитывает переменную окружения PORT.
CMD ["node", ".svelte-kit/output/server/index.js"]

# Альтернативно, можно использовать npm run preview, но нужно убедиться,
# что скрипт preview в package.json использует правильный порт.
# CMD ["npm", "run", "preview"] # Требует, чтобы PORT был передан или установлен в скрипте
# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.*
!.env.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Sveltekit cache directory
.svelte-kit/

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Firebase cache directory
.firebase/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v3
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Vite logs files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
